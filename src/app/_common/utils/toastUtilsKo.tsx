import toast from 'react-hot-toast';

// Ï†ÑÏó≠ ÌÇ§Î≥¥Îìú Ìï∏Îì§Îü¨ Í¥ÄÎ¶¨
let currentKeyHandler: ((e: KeyboardEvent) => void) | null = null;

interface DeleteConfirmOptions {
    title?: string;
    message: string;
    itemName: string;
    onConfirm: () => void | Promise<void>;
    onCancel?: () => void;
    confirmText?: string;
    cancelText?: string;
    duration?: number;
}

interface DeleteSuccessOptions {
    itemName: string;
    itemType?: string;
    count?: number;
    customMessage?: string;
}

interface DeleteErrorOptions {
    itemName: string;
    itemType?: string;
    error?: Error | string;
    customMessage?: string;
}

interface WarningConfirmOptions {
    title?: string;
    message: string;
    onConfirm: () => void | Promise<void>;
    onCancel?: () => void;
    confirmText?: string;
    cancelText?: string;
    duration?: number;
}

interface WarningToastOptions {
    message: string;
    duration?: number;
}

/**
 * Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏÇ≠Ï†ú ÌôïÏù∏ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showDeleteConfirmToastKo = ({
    title = 'ÏÇ≠Ï†ú ÌôïÏù∏',
    message,
    itemName,
    onConfirm,
    onCancel,
    confirmText = 'ÏÇ≠Ï†ú',
    cancelText = 'Ï∑®ÏÜå',
    duration = Infinity,
    enableEnterKey = false,
}: DeleteConfirmOptions & { enableEnterKey?: boolean }) => {
    // Í∏∞Ï°¥ Ìï∏Îì§Îü¨Í∞Ä ÏûàÏúºÎ©¥ Ï†úÍ±∞
    if (currentKeyHandler) {
        document.removeEventListener('keydown', currentKeyHandler);
        currentKeyHandler = null;
    }

    if (enableEnterKey) {
        currentKeyHandler = (e: KeyboardEvent) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                e.stopPropagation();
                // Ìï∏Îì§Îü¨ Ï†ïÎ¶¨
                if (currentKeyHandler) {
                    document.removeEventListener('keydown', currentKeyHandler);
                    currentKeyHandler = null;
                }
                toast.dismiss();
                onConfirm();
            }
            if (e.key === 'Escape') {
                e.preventDefault();
                e.stopPropagation();
                // Ìï∏Îì§Îü¨ Ï†ïÎ¶¨
                if (currentKeyHandler) {
                    document.removeEventListener('keydown', currentKeyHandler);
                    currentKeyHandler = null;
                }
                toast.dismiss();
                onCancel?.();
            }
        };
        document.addEventListener('keydown', currentKeyHandler);
    }

    const confirmToast = toast(
        (t) => {

            return (
                <div
                    style={{
                        display: 'flex',
                        flexDirection: 'column',
                        gap: '12px',
                    }}
                >
                    <div
                        style={{
                            fontWeight: '600',
                            color: '#dc2626',
                            fontSize: '1rem',
                        }}
                    >
                        {title}
                    </div>
                    <div
                        style={{
                            fontSize: '0.9rem',
                            color: '#374151',
                            lineHeight: '1.4',
                        }}
                    >
                        {message}
                    </div>
                    {enableEnterKey && (
                        <div
                            style={{
                                fontSize: '0.8rem',
                                color: '#6b7280',
                                fontStyle: 'italic',
                            }}
                        >
                            üí° EnterÌÇ§Î•º ÎàÑÎ•¥Î©¥ ÏÇ≠Ï†úÎê©ÎãàÎã§ | ESCÎ°ú Ï∑®ÏÜå
                        </div>
                    )}
                    <div
                        style={{
                            display: 'flex',
                            gap: '8px',
                            justifyContent: 'flex-end',
                            marginTop: '4px',
                        }}
                    >
                        <button
                            onClick={() => {
                                toast.dismiss(t.id);
                                if (currentKeyHandler) {
                                    document.removeEventListener('keydown', currentKeyHandler);
                                    currentKeyHandler = null;
                                }
                                onCancel?.();
                            }}
                            style={{
                                padding: '8px 16px',
                                backgroundColor: '#ffffff',
                                border: '2px solid #6b7280',
                                borderRadius: '6px',
                                cursor: 'pointer',
                                fontSize: '0.85rem',
                                fontWeight: '500',
                                color: '#374151',
                                transition: 'all 0.2s ease',
                                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                            }}
                        >
                            {cancelText}
                        </button>
                        <button
                            onClick={async () => {
                                toast.dismiss(t.id);
                                if (currentKeyHandler) {
                                    document.removeEventListener('keydown', currentKeyHandler);
                                    currentKeyHandler = null;
                                }
                                try {
                                    await onConfirm();
                                } catch (error) {
                                    console.error('Delete confirmation error:', error);
                                }
                            }}
                            style={{
                                padding: '8px 16px',
                                backgroundColor: '#dc2626',
                                color: 'white',
                                border: '2px solid #b91c1c',
                                borderRadius: '6px',
                                cursor: 'pointer',
                                fontSize: '0.85rem',
                                fontWeight: '500',
                                transition: 'all 0.2s ease',
                                boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                            }}
                        >
                            {confirmText}
                        </button>
                    </div>
                </div>
            );
        },
        {
            duration,
            style: {
                maxWidth: '420px',
                padding: '20px',
                backgroundColor: '#f9fafb',
                border: '2px solid #374151',
                borderRadius: '12px',
                boxShadow:
                    '0 8px 25px rgba(0, 0, 0, 0.15), 0 4px 10px rgba(0, 0, 0, 0.1)',
                color: '#374151',
                fontFamily: 'system-ui, -apple-system, sans-serif',
            },
        },
    );

    return confirmToast;
};

/**
 * ÏÇ≠Ï†ú ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showDeleteSuccessToastKo = ({
    itemName,
    itemType = 'Ìï≠Î™©',
    count,
    customMessage,
}: DeleteSuccessOptions) => {
    let message = customMessage;

    if (!message) {
        if (count !== undefined) {
            message = `"${itemName}" ${itemType}Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§! (${count}Í∞ú Í∏∞Î°ù Ï†úÍ±∞Îê®)`;
        } else {
            message = `"${itemName}" ${itemType}Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!`;
        }
    }

    toast.success(message, {
        duration: 3000,
        style: {
            background: '#ffffff',
            color: '#374151',
            border: '2px solid #10b981',
            borderRadius: '10px',
            fontWeight: '500',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            boxShadow: '0 4px 12px rgba(16, 185, 129, 0.15)',
        },
        iconTheme: {
            primary: '#10b981',
            secondary: '#fff',
        },
    });
};

/**
 * ÏÇ≠Ï†ú Ïã§Ìå® ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showDeleteErrorToastKo = ({
    itemName,
    itemType = 'Ìï≠Î™©',
    error,
    customMessage,
}: DeleteErrorOptions) => {
    let message = customMessage;

    if (!message) {
        const errorMessage = error instanceof Error ? error.message : error || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò';
        message = `"${itemName}" ${itemType} ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${errorMessage}`;
    }

    toast.error(message, {
        duration: 4000,
        style: {
            background: '#ef4444',
            color: '#fff',
            borderRadius: '10px',
            fontWeight: '500',
        },
        iconTheme: {
            primary: '#dc2626',
            secondary: '#fff',
        },
    });
};

/**
 * Í≤ΩÍ≥† ÌôïÏù∏ ÌÜ†Ïä§Ìä∏ (Ï£ºÌô©ÏÉâ, ÌïúÍµ≠Ïñ¥)
 */
export const showWarningConfirmToastKo = ({
    title = 'Í≤ΩÍ≥†',
    message,
    onConfirm,
    onCancel,
    confirmText = 'Í≥ÑÏÜç',
    cancelText = 'Ï∑®ÏÜå',
    duration = Infinity,
}: WarningConfirmOptions) => {
    const confirmToast = toast(
        (t) => (
            <div
                style={{
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '12px',
                }}
            >
                <div
                    style={{
                        fontWeight: '600',
                        color: '#f59e0b',
                        fontSize: '1rem',
                    }}
                >
                    {title}
                </div>
                <div
                    style={{
                        fontSize: '0.9rem',
                        color: '#374151',
                        lineHeight: '1.4',
                    }}
                >
                    {message}
                </div>
                <div
                    style={{
                        display: 'flex',
                        gap: '8px',
                        justifyContent: 'flex-end',
                        marginTop: '4px',
                    }}
                >
                    <button
                        onClick={() => {
                            toast.dismiss(t.id);
                            onCancel?.();
                        }}
                        style={{
                            padding: '8px 16px',
                            backgroundColor: '#ffffff',
                            border: '2px solid #6b7280',
                            borderRadius: '6px',
                            cursor: 'pointer',
                            fontSize: '0.85rem',
                            fontWeight: '500',
                            color: '#374151',
                            transition: 'all 0.2s ease',
                            boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                        }}
                    >
                        {cancelText}
                    </button>
                    <button
                        onClick={async () => {
                            toast.dismiss(t.id);
                            try {
                                await onConfirm();
                            } catch (error) {
                                console.error('Warning confirmation error:', error);
                            }
                        }}
                        style={{
                            padding: '8px 16px',
                            backgroundColor: '#f59e0b',
                            color: 'white',
                            border: '2px solid #d97706',
                            borderRadius: '6px',
                            cursor: 'pointer',
                            fontSize: '0.85rem',
                            fontWeight: '500',
                            transition: 'all 0.2s ease',
                            boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                        }}
                    >
                        {confirmText}
                    </button>
                </div>
            </div>
        ),
        {
            duration,
            style: {
                maxWidth: '420px',
                padding: '20px',
                backgroundColor: '#f9fafb',
                border: '2px solid #374151',
                borderRadius: '12px',
                boxShadow:
                    '0 8px 25px rgba(0, 0, 0, 0.15), 0 4px 10px rgba(0, 0, 0, 0.1)',
                color: '#374151',
                fontFamily: 'system-ui, -apple-system, sans-serif',
            },
        },
    );

    return confirmToast;
};

/**
 * Í∞ÑÎã®Ìïú Í≤ΩÍ≥† ÌÜ†Ïä§Ìä∏ (Ï£ºÌô©ÏÉâ, ÌïúÍµ≠Ïñ¥)
 */
export const showWarningToastKo = ({
    message,
    duration = 4000,
}: WarningToastOptions) => {
    toast(message, {
        duration,
        icon: '‚ö†Ô∏è',
        style: {
            background: '#f59e0b',
            color: '#fff',
            borderRadius: '10px',
            fontWeight: '500',
        },
        iconTheme: {
            primary: '#d97706',
            secondary: '#fff',
        },
    });
};

/**
 * ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÎçÆÏñ¥Ïì∞Í∏∞ ÌôïÏù∏ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showWorkflowOverwriteConfirmKo = (
    workflowName: string,
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showWarningConfirmToastKo({
        title: 'ÏõåÌÅ¨ÌîåÎ°úÏö∞Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§',
        message: `"${workflowName}" Ïù¥Î¶ÑÏùò ÏõåÌÅ¨ÌîåÎ°úÏö∞Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.\nÎçÆÏñ¥Ïì∞ÏãúÍ≤†ÏäµÎãàÍπå?`,
        onConfirm,
        onCancel,
        confirmText: 'ÎçÆÏñ¥Ïì∞Í∏∞',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * ÏÉà ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÏûë ÌôïÏù∏ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showNewWorkflowConfirmKo = (
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showWarningConfirmToastKo({
        title: 'ÏÉà ÏõåÌÅ¨ÌîåÎ°úÏö∞Î•º ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
        message: 'ÌòÑÏû¨ Î™®Îì† ÎÖ∏ÎìúÏôÄ Ïó∞Í≤∞Ïù¥ ÏÇ≠Ï†úÎê©ÎãàÎã§.\nÌïÑÏöîÌïòÎã§Î©¥ ÌòÑÏû¨ ÏûëÏóÖÏùÑ Î®ºÏ†Ä Ï†ÄÏû•Ìï¥Ï£ºÏÑ∏Ïöî.',
        onConfirm,
        onCancel,
        confirmText: 'ÏÉàÎ°ú ÏãúÏûë',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * ÏûëÏóÖ ÌûàÏä§ÌÜ†Î¶¨ Ï¥àÍ∏∞Ìôî Í≤ΩÍ≥† ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showHistoryClearWarningKo = (
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showWarningConfirmToastKo({
        title: 'ÏûëÏóÖ ÌûàÏä§ÌÜ†Î¶¨Í∞Ä Ï¥àÍ∏∞ÌôîÎê©ÎãàÎã§',
        message: 'Ïù¥ ÏûëÏóÖÏùÑ ÏàòÌñâÌïòÎ©¥ Î™®Îì† ÏûëÏóÖ ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÏÇ≠Ï†úÎê©ÎãàÎã§.',
        onConfirm,
        onCancel,
        confirmText: 'Í≥ÑÏÜç',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÇ≠Ï†ú Ï†ÑÏö© Ïú†Ìã∏Î¶¨Ìã∞ (ÌïúÍµ≠Ïñ¥)
 */
export const showWorkflowDeleteConfirmKo = (
    workflowName: string,
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showDeleteConfirmToastKo({
        title: 'ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÇ≠Ï†ú',
        message: `"${workflowName}" ÏõåÌÅ¨ÌîåÎ°úÏö∞Î•º Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.`,
        itemName: workflowName,
        onConfirm,
        onCancel,
        confirmText: 'ÏÇ≠Ï†ú',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * Î°úÍ∑∏ ÏÇ≠Ï†ú Ï†ÑÏö© Ïú†Ìã∏Î¶¨Ìã∞ (ÌïúÍµ≠Ïñ¥)
 */
export const showLogDeleteConfirmKo = (
    logType: string,
    workflowName: string,
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showDeleteConfirmToastKo({
        title: `${logType} ÏÇ≠Ï†ú`,
        message: `"${workflowName}" ÏõåÌÅ¨ÌîåÎ°úÏö∞Ïùò Î™®Îì† ${logType.toLowerCase()}ÏùÑ(Î•º) ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.`,
        itemName: workflowName,
        onConfirm,
        onCancel,
        confirmText: 'ÏÇ≠Ï†ú',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * Ï±ÑÌåÖ ÏÇ≠Ï†ú Ï†ÑÏö© Ïú†Ìã∏Î¶¨Ìã∞ (ÌïúÍµ≠Ïñ¥)
 */
export const showChatDeleteConfirmKo = (
    chatName: string,
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showDeleteConfirmToastKo({
        title: 'Ï±ÑÌåÖ ÏÇ≠Ï†ú',
        message: `"${chatName}" Ï±ÑÌåÖÏùÑ Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.`,
        itemName: chatName,
        onConfirm,
        onCancel,
        confirmText: 'ÏÇ≠Ï†ú',
        cancelText: 'Ï∑®ÏÜå',
        enableEnterKey: true,
    });
};

/**
 * ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ï†ÑÏö© Ïú†Ìã∏Î¶¨Ìã∞ (ÌïúÍµ≠Ïñ¥)
 */
export const showPerformanceDataDeleteConfirmKo = (
    workflowName: string,
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showDeleteConfirmToastKo({
        title: 'ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú',
        message: `"${workflowName}" ÏõåÌÅ¨ÌîåÎ°úÏö∞Ïùò Î™®Îì† ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.`,
        itemName: workflowName,
        onConfirm,
        onCancel,
        confirmText: 'ÏÇ≠Ï†ú',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * LLM Ï†úÍ≥µÏûê Î≥ÄÍ≤Ω ÌôïÏù∏ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showLLMProviderChangeConfirmKo = (
    currentProvider: string,
    newProvider: string,
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showWarningConfirmToastKo({
        title: 'LLM Ï†úÍ≥µÏûê Î≥ÄÍ≤Ω',
        message: `ÌòÑÏû¨: ${currentProvider} ‚Üí Î≥ÄÍ≤Ω: ${newProvider}\nÎ≥ÄÍ≤Ω Ïãú Î∞±ÏóîÎìúÏóêÏÑú Ïû¨ÏÑ§Ï†ï ÏûëÏóÖÏù¥ ÏàòÌñâÎê©ÎãàÎã§.`,
        onConfirm,
        onCancel,
        confirmText: 'Î≥ÄÍ≤Ω',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * ÏùºÎ∞òÏ†ÅÏù∏ ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showSuccessToastKo = (message: string, duration: number = 3000) => {
    toast.success(message, {
        duration,
        style: {
            background: '#ffffff',
            color: '#374151',
            border: '2px solid #10b981',
            borderRadius: '10px',
            fontWeight: '500',
            fontFamily: 'system-ui, -apple-system, sans-serif',
            boxShadow: '0 4px 12px rgba(16, 185, 129, 0.15)',
        },
        iconTheme: {
            primary: '#10b981',
            secondary: '#fff',
        },
    });
};

/**
 * ÏùºÎ∞òÏ†ÅÏù∏ ÏóêÎü¨ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showErrorToastKo = (message: string, duration: number = 4000) => {
    toast.error(message, {
        duration,
        style: {
            background: '#ef4444',
            color: '#fff',
            borderRadius: '10px',
            fontWeight: '500',
        },
        iconTheme: {
            primary: '#dc2626',
            secondary: '#fff',
        },
    });
};

/**
 * Î°úÎî© ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showLoadingToastKo = (message: string, id?: string) => {
    return toast.loading(message, {
        id,
        style: {
            background: '#ffffff',
            color: '#374151',
            border: '1px solid #d1d5db',
            borderRadius: '10px',
            fontWeight: '500',
            fontFamily: 'system-ui, -apple-system, sans-serif',
        },
    });
};

/**
 * ÌÜ†Ïä§Ìä∏ Ìï¥Ï†ú
 */
export const dismissToastKo = (id?: string) => {
    toast.dismiss(id);
};

/**
 * ÏûÑÎ≤†Îî© Ï†úÍ≥µÏûê Î≥ÄÍ≤Ω ÌôïÏù∏ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showEmbeddingProviderChangeConfirmKo = (
    currentProvider: string,
    newProvider: string,
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showWarningConfirmToastKo({
        title: 'ÏûÑÎ≤†Îî© Ï†úÍ≥µÏûê Î≥ÄÍ≤Ω',
        message: `ÌòÑÏû¨: ${currentProvider} ‚Üí Î≥ÄÍ≤Ω: ${newProvider}\nÎ≥ÄÍ≤Ω Ïãú Î∞±ÏóîÎìúÏóêÏÑú Ïû¨ÏÑ§Ï†ï ÏûëÏóÖÏù¥ ÏàòÌñâÎê©ÎãàÎã§.`,
        onConfirm,
        onCancel,
        confirmText: 'Î≥ÄÍ≤Ω',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * Î≥µÏÇ¨ ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showCopySuccessToastKo = (message: string = 'ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!') => {
    showSuccessToastKo(message);
};

/**
 * Î≥µÏÇ¨ Ïã§Ìå® ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showCopyErrorToastKo = (message: string = 'Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.') => {
    showErrorToastKo(message);
};

/**
 * Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showConnectionSuccessToastKo = (service: string, message?: string) => {
    const defaultMessage = `${service} Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ!`;
    showSuccessToastKo(message || defaultMessage);
};

/**
 * Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ïã§Ìå® ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showConnectionErrorToastKo = (service: string, error: string) => {
    showErrorToastKo(`${service} Ïó∞Í≤∞ Ïã§Ìå®: ${error}`);
};

/**
 * Ïù∏Ïä§ÌÑ¥Ïä§ Í¥ÄÎ¶¨ Í¥ÄÎ†® ÌÜ†Ïä§Ìä∏Îì§
 */
export const showInstanceSuccessToastKo = (message: string) => {
    showSuccessToastKo(message);
};

export const showInstanceErrorToastKo = (message: string) => {
    showErrorToastKo(message);
};

/**
 * VLLM Í¥ÄÎ†® ÌÜ†Ïä§Ìä∏Îì§
 */
export const showVLLMSuccessToastKo = (message: string) => {
    showSuccessToastKo(message);
};

export const showVLLMErrorToastKo = (message: string) => {
    showErrorToastKo(message);
};

/**
 * GPU Í≤ÄÏÉâ Í¥ÄÎ†® ÌÜ†Ïä§Ìä∏Îì§
 */
export const showGpuSearchSuccessToastKo = (count: number) => {
    showSuccessToastKo(`${count}Í∞úÏùò Ïò§ÌçºÎ•º Ï∞æÏïòÏäµÎãàÎã§.`);
};

export const showGpuSearchErrorToastKo = (error: string) => {
    showErrorToastKo(`Í≤ÄÏÉâ Ïã§Ìå®: ${error}`);
};

/**
 * VLLM Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Í¥ÄÎ†® ÌÜ†Ïä§Ìä∏Îì§
 */
export const showInstanceCreationStartToastKo = (instanceId: string) => {
    showSuccessToastKo(`VLLM Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± ÏãúÏûë! ID: ${instanceId}`);
};

export const showInstanceCreationProgressToastKo = (instanceId: string, status: string) => {
    return showLoadingToastKo(`Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId}: ${status}`);
};

export const showInstanceCreationSuccessToastKo = (instanceId: string, message: string) => {
    showSuccessToastKo(`Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId}: ${message}`);
};

export const showInstanceCreationErrorToastKo = (instanceId: string, error: string) => {
    showErrorToastKo(`Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId}: ${error}`);
};

/**
 * Î°úÍ∑∏ ÏÇ≠Ï†ú ÌôïÏù∏ ÌÜ†Ïä§Ìä∏ (ÌïúÍµ≠Ïñ¥)
 */
export const showLogDeleteConfirmToastKo = (
    onConfirm: () => void | Promise<void>,
    onCancel?: () => void
) => {
    return showWarningConfirmToastKo({
        title: 'Î°úÍ∑∏ ÏÇ≠Ï†ú',
        message: 'Ï†ïÎßê Î™®Îì† Î°úÍ∑∏Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÏù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.',
        onConfirm,
        onCancel,
        confirmText: 'ÏÇ≠Ï†ú',
        cancelText: 'Ï∑®ÏÜå',
    });
};

/**
 * VLLM Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Í¥ÄÎ†® ÌÜ†Ïä§Ìä∏Îì§
 */
export const showVllmInstanceCreateSuccessToastKo = (instanceId: string) => {
    showSuccessToastKo(`VLLM Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± ÏãúÏûë! ID: ${instanceId}`);
};

export const showVllmInstanceCreateErrorToastKo = (error: string) => {
    showErrorToastKo(`Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Ïã§Ìå®: ${error}`);
};

/**
 * ÏûÖÎ†• Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÌÜ†Ïä§Ìä∏Îì§
 */
export const showValidationErrorToastKo = (message: string) => {
    showErrorToastKo(message);
};

/**
 * Ïò§Ìçº ÏÑ†ÌÉù ÌÜ†Ïä§Ìä∏
 */
export const showOfferSelectedToastKo = () => {
    showSuccessToastKo('Ïò§ÌçºÍ∞Ä ÏÑ†ÌÉùÎêòÏóàÏäµÎãàÎã§. VLLM ÏÑ§Ï†ïÏùÑ ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî.');
};

/**
 * Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉÅÌÉú Í¥ÄÎ†® ÌÜ†Ïä§Ìä∏Îì§
 */
export const showInstanceStatusToastKo = {
    creating: (instanceId: string) => showLoadingToastKo(`‚è≥ Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId} ÏÉùÏÑ± Ï§ë...`),
    starting: (instanceId: string) => showLoadingToastKo(`üöÄ Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId} ÏãúÏûë Ï§ë...`),
    running: (instanceId: string) => showSuccessToastKo(`‚úÖ Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId} Ïã§Ìñâ Ï§ë, VLLM ÏÑ§Ï†ï ÎåÄÍ∏∞...`),
    vllmRunning: (instanceId: string) => showSuccessToastKo(`üéâ Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId} VLLM Ïã§Ìñâ ÏôÑÎ£å!`),
    exited: (instanceId: string) => showErrorToastKo(`‚ùå Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId} Ï¢ÖÎ£åÎê®`),
    error: (instanceId: string, error?: string) => showErrorToastKo(`üí• Ïù∏Ïä§ÌÑ¥Ïä§ ${instanceId} Ïò§Î•ò${error ? `: ${error}` : ''}`)
};
