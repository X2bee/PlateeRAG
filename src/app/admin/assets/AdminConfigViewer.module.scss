@use "sass:color";

$primary-blue: #2563eb;
$primary-green: #059669;
$primary-red: #dc2626;
$gray-50: #f9fafb;
$gray-100: #f3f4f6;
$gray-200: #e5e7eb;
$gray-300: #d1d5db;
$gray-400: #9ca3af;
$gray-500: #6b7280;
$gray-600: #4b5563;
$gray-700: #374151;
$gray-900: #111827;
$white: #ffffff;

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    min-height: 100vh;
}

.loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem 2rem;
    text-align: center;

    p {
        color: $gray-600;
        font-size: 1rem;
        margin-top: 1rem;
    }
}

.spinner {
    width: 2rem;
    height: 2rem;
    color: $primary-blue;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }
}

.error {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem 2rem;
    text-align: center;

    p {
        color: $primary-red;
        font-size: 1rem;
        margin-bottom: 1.5rem;
    }
}

.retryButton {
    padding: 0.75rem 1.5rem;
    background-color: $primary-blue;
    color: $white;
    border: none;
    border-radius: 0.5rem;
    font-size: 0.925rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;

    &:hover {
        background-color: color.adjust($primary-blue, $lightness: -10%);
    }
}

// Header
.header {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid $gray-200;
}

.headerActions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
}

.refreshButton, .settingsButton {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background-color: $white;
    color: $gray-700;
    border: 1px solid $gray-300;
    border-radius: 0.5rem;
    font-size: 0.925rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease-in-out;

    &:hover {
        background-color: $gray-50;
        border-color: $gray-400;
    }

    svg {
        width: 1rem;
        height: 1rem;
    }
}

.settingsButton {
    background-color: $primary-blue;
    color: $white;
    border-color: $primary-blue;

    &:hover {
        background-color: color.adjust($primary-blue, $lightness: -10%);
        border-color: color.adjust($primary-blue, $lightness: -10%);
    }
}

// Stats
.stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.statCard {
    background: #F6F4F8;
    border: 1px solid #DDDDDD;
    border-radius: 0.75rem;
    padding: 1.5rem;
    text-align: center;
    transition: all 0.2s ease-in-out;

    &:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border-color: rgba(#4041B2, 0.3);
    }
}

.statValue {
    font-size: 2rem;
    font-weight: 700;
    color: #4041B2;
    margin-bottom: 0.5rem;
}

.statLabel {
    font-size: 0.925rem;
    font-weight: 500;
    color: $gray-600;
}

// Filters
.filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-bottom: 2rem;
    padding: 1rem;
    background: $gray-50;
    border-radius: 0.75rem;
}

.filterButton {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.625rem 1rem;
    background: $white;
    color: $gray-700;
    border: 1px solid $gray-300;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease-in-out;

    &:hover {
        background: $gray-100;
        border-color: $gray-400;
    }

    &.active {
        background: $primary-blue;
        color: $white;
        border-color: $primary-blue;

        .filterIcon {
            color: $white !important;
        }
    }
}

.filterIcon {
    width: 1rem;
    height: 1rem;
}

// Config List
.configList {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.configItem {
    background: #F6F4F8;
    border: 1px solid #DDDDDD;
    border-radius: 0.75rem;
    overflow: hidden;
    transition: all 0.2s ease-in-out;

    &:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border-color: rgba(#4041B2, 0.3);
    }
}

.configHeader {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.25rem 1.5rem;
    border-bottom: 1px solid $gray-100;
}

.configInfo {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.categoryIcon {
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background: $gray-50;
    border-radius: 0.5rem;
    font-size: 1.25rem;
    flex-shrink: 0;
}

.configTitle {
    h4 {
        font-size: 1.125rem;
        font-weight: 600;
        color: $gray-900;
        margin: 0 0 0.25rem 0;
    }
}

.configPath {
    font-size: 0.825rem;
    color: $gray-500;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
}

.configStatus {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.statusBadge {
    padding: 0.375rem 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.8rem;
    font-weight: 500;

    &.saved {
        background: rgba($primary-green, 0.1);
        color: $primary-green;
    }

    &.default {
        background: rgba($gray-500, 0.1);
        color: $gray-600;
    }
}

.typeBadge {
    padding: 0.500rem 0.75rem;
    background: rgba($primary-blue, 0.1);
    color: $primary-blue;
    border-radius: 0.375rem;
    font-size: 0.75rem;
    font-weight: 600;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    text-transform: capitalize;
    min-width: 3.5rem;
    text-align: center;
    display: inline-block;
    line-height: 1.2;
    letter-spacing: 0.025em;
}

.configValue {
    padding: 1.25rem 1.5rem;
    background: $gray-50;
}

.valueRow {
    display: flex;
    margin-bottom: 1rem;
    align-items: center;

    &:last-child {
        margin-bottom: 0;
    }

    label {
        width: 4.5rem;
        font-size: 0.875rem;
        font-weight: 600;
        color: $gray-700;
        flex-shrink: 0;
        line-height: 1.5;
    }

    span {
        flex: 1;
        font-size: 0.875rem;
        line-height: 1.5;
        word-break: break-all;
    }
}

.currentValue {
    color: $gray-900;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    background: $white;
    min-height: 2.5rem;
    padding: 0.5rem 0.75rem;
    border: 1px solid $gray-200;
    border-radius: 0.375rem;
    font-weight: 500;
    line-height: 1.5;
    display: block;
}

.defaultValue {
    color: $gray-600;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    background: $gray-100;
    min-height: 2.5rem;
    padding: 0.5rem 0.75rem;
    border: 1px solid $gray-200;
    border-radius: 0.375rem;
    font-style: italic;
    line-height: 1.5;
    display: block;
}

.emptyState {
    text-align: center;
    padding: 4rem 2rem;

    p {
        color: $gray-500;
        font-size: 1rem;
    }
}

// 편집 관련 스타일
.valueWithEdit {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex: 1;
}

.editTrigger {
    background: transparent;
    border: 1px solid $gray-300;
    color: $gray-600;
    padding: 0.5rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 2.5rem;
    height: 2.5rem;
    flex-shrink: 0;

    &:hover {
        background: $primary-blue;
        border-color: $primary-blue;
        color: $white;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba($primary-blue, 0.2);
    }

    &:active {
        transform: translateY(0);
    }

    svg {
        width: 1rem;
        height: 1rem;
    }
}

.editButtons {
    display: flex;
    gap: 0.25rem;
}

.editButton {
    background: transparent;
    border: 1px solid;
    padding: 0.5rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 2.25rem;
    height: 2.25rem;

    &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    svg {
        width: 1rem;
        height: 1rem;
    }
}

.saveButton {
    border-color: $primary-green;
    color: $primary-green;

    &:hover:not(:disabled) {
        background: $primary-green;
        color: $white;
    }
}

.cancelButton {
    border-color: $gray-400;
    color: $gray-600;

    &:hover:not(:disabled) {
        background: $gray-100;
        border-color: $gray-500;
    }
}

// 인라인 편집 스타일 (현재값 영역에서 사용)
.editInputInline,
.editSelectInline {
    color: $gray-900;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    background: $white;
    padding: 0.5rem 0.75rem;
    border: 2px solid $primary-blue;
    border-radius: 0.375rem;
    font-weight: 500;
    line-height: 1.5;
    font-size: 0.875rem;
    flex: 1;
    transition: all 0.2s ease-in-out;

    &:focus {
        outline: none;
        border-color: $primary-blue;
        box-shadow: 0 0 0 3px rgba($primary-blue, 0.1);
    }

    &:disabled {
        background: $gray-100;
        color: $gray-500;
        cursor: not-allowed;
    }
}

.editSelectInline {
    min-width: 100px;
}

.helpText {
    font-size: 0.75rem;
    color: $gray-500;
    margin-top: 0.5rem;
    font-style: italic;
}

// Responsive
@media (max-width: 768px) {
    .container {
        padding: 1rem;
    }

    .refreshButton {
        align-self: flex-start;
    }

    .stats {
        grid-template-columns: 1fr;
    }

    .filters {
        flex-direction: column;
        gap: 0.5rem;
    }

    .filterButton {
        justify-content: center;
    }

    .configHeader {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
    }

    .configStatus {
        align-self: flex-end;
    }

    .valueRow {
        flex-direction: column;
        gap: 0.5rem;

        label {
            width: auto;
            font-weight: 600;
        }
    }

    .valueWithEdit {
        flex-direction: column;
        align-items: stretch;
        gap: 0.5rem;

        .editTrigger {
            align-self: flex-start;
        }
    }
}
